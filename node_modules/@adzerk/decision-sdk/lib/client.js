"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
var isomorphic_unfetch_1 = __importDefault(require("isomorphic-unfetch"));
var form_data_1 = __importDefault(require("form-data"));
var debug_1 = __importDefault(require("debug"));
var api_decision_js_1 = require("@adzerk/api-decision-js");
var utils_1 = require("./utils");
global.FormData = global.FormData || form_data_1.default;
var log = debug_1.default('adzerk-decision-sdk:client');
var isNode = typeof process !== 'undefined' && process.title !== 'browser';
var isReactNative = typeof navigator !== 'undefined' && navigator.product === 'ReactNative';
var deprecatedPlacementFields = [
    ['ecpmPartition', 'ecpmPartitions'],
];
function isDecisionMultiWinner(obj) {
    return obj instanceof Array;
}
var defaultLogger = function (lvl, msg, meta) {
    if (meta != undefined) {
        log("[" + lvl + "] " + msg + " [%o]", meta);
    }
    else {
        log("[" + lvl + "] " + msg);
    }
};
var DecisionClient = (function () {
    function DecisionClient(configuration, networkId, logger, siteId, apiKey) {
        this._api = new api_decision_js_1.DecisionApi(configuration);
        this._networkId = networkId;
        this._siteId = siteId;
        this._logger = logger;
        this._apiKey = apiKey;
    }
    DecisionClient.prototype.get = function (request, additionalOpts) {
        return __awaiter(this, void 0, void 0, function () {
            var logger, processedRequest, api, response, decisions;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        logger = this._logger || defaultLogger;
                        logger('info', 'Fetching decisions from Adzerk API');
                        logger('info', 'Processing request: ', request);
                        processedRequest = utils_1.removeUndefinedAndBlocklisted(request, [
                            'isMobile',
                        ]);
                        if (processedRequest.enableBotFiltering === undefined) {
                            processedRequest.enableBotFiltering = !isNode;
                        }
                        if (processedRequest.placements === undefined ||
                            !processedRequest.placements.length) {
                            throw new api_decision_js_1.RequiredError('decisionRequest', 'Each request requires at least one placement');
                        }
                        processedRequest.placements.forEach(function (p, idx) {
                            if (p.adTypes === undefined || !p.adTypes.length) {
                                throw new api_decision_js_1.RequiredError('placements', 'Each placement requires at least one ad type');
                            }
                            for (var _i = 0, deprecatedPlacementFields_1 = deprecatedPlacementFields; _i < deprecatedPlacementFields_1.length; _i++) {
                                var pair = deprecatedPlacementFields_1[_i];
                                var deprecatedField = pair[0], replacement = pair[1];
                                if ((p[deprecatedField] || undefined) != undefined) {
                                    logger('warn', "DEPRECATION WARNING: " + deprecatedField + " has been deprecated. Please use " + replacement + " instead.");
                                }
                            }
                            p.networkId = p.networkId || _this._networkId;
                            p.siteId = p.siteId || _this._siteId;
                            p.divName = p.divName || "div" + idx;
                        });
                        api = this._api;
                        if (!!(additionalOpts === null || additionalOpts === void 0 ? void 0 : additionalOpts.includeExplanation) || !!(additionalOpts === null || additionalOpts === void 0 ? void 0 : additionalOpts.userAgent)) {
                            api = api.withPreMiddleware(function (context) { return __awaiter(_this, void 0, void 0, function () {
                                var headers, headerObject, headerObject;
                                return __generator(this, function (_a) {
                                    if (!context.init.headers) {
                                        context.init.headers = {};
                                    }
                                    headers = context.init.headers;
                                    if (!!additionalOpts.includeExplanation) {
                                        logger('warn', '--------------------------------------------------------------\n' +
                                            '--------------!!! WARNING - WARNING - WARNING !!!-------------\n' +
                                            '' +
                                            'You have opted to include explainer details with this request!\n' +
                                            'This will cause performance degradation and should not be done\n' +
                                            'in production environments.\n' +
                                            '--------------------------------------------------------------');
                                        if (additionalOpts.desiredAds) {
                                            headerObject = {
                                                apiKey: additionalOpts.apiKey,
                                                desiredAd: additionalOpts.desiredAds,
                                            };
                                            headers['x-adzerk-explain'] = JSON.stringify(headerObject);
                                        }
                                        else if (additionalOpts.desiredAdMap) {
                                            headerObject = {
                                                apiKey: additionalOpts.apiKey,
                                                desiredAdMap: additionalOpts.desiredAdMap,
                                            };
                                            headers['x-adzerk-explain'] = JSON.stringify(headerObject);
                                        }
                                        else {
                                            headers['x-adzerk-explain'] = additionalOpts.apiKey || '';
                                        }
                                    }
                                    if (!!additionalOpts.userAgent) {
                                        headers['User-Agent'] = additionalOpts.userAgent || '';
                                    }
                                    return [2, context];
                                });
                            }); });
                        }
                        logger('info', 'Using the processed request: ', processedRequest);
                        return [4, api.getDecisions(processedRequest)];
                    case 1:
                        response = _a.sent();
                        logger('info', 'Received response: ', response);
                        decisions = response.decisions || {};
                        Object.keys(decisions).forEach(function (k) {
                            if (!isDecisionMultiWinner(decisions[k])) {
                                decisions[k] = [decisions[k]];
                            }
                        });
                        return [2, response];
                }
            });
        });
    };
    return DecisionClient;
}());
var UserDbClient = (function () {
    function UserDbClient(configuration, networkId) {
        this._api = new api_decision_js_1.UserdbApi(configuration);
        this._networkId = networkId;
    }
    UserDbClient.prototype.setCustomProperties = function (userKey, properties, networkId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this._api.addCustomProperties(networkId || this._networkId, userKey, properties)];
                    case 1: return [2, _a.sent()];
                }
            });
        });
    };
    UserDbClient.prototype.addInterest = function (userKey, interest, networkId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this._api.addInterests(networkId || this._networkId, userKey, interest)];
                    case 1: return [2, _a.sent()];
                }
            });
        });
    };
    UserDbClient.prototype.addRetargetingSegment = function (userKey, advertiserId, retargetingSegmentId, networkId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this._api.addRetargetingSegment(networkId || this._networkId, advertiserId, retargetingSegmentId, userKey)];
                    case 1: return [2, _a.sent()];
                }
            });
        });
    };
    UserDbClient.prototype.forget = function (userKey, networkId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this._api.forget(networkId || this._networkId, userKey)];
                    case 1: return [2, _a.sent()];
                }
            });
        });
    };
    UserDbClient.prototype.gdprConsent = function (gdprConsent, networkId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this._api.gdprConsent(networkId || this._networkId, gdprConsent)];
                    case 1: return [2, _a.sent()];
                }
            });
        });
    };
    UserDbClient.prototype.ipOverride = function (userKey, ip, networkId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this._api.ipOverride(networkId || this._networkId, userKey, ip)];
                    case 1: return [2, _a.sent()];
                }
            });
        });
    };
    UserDbClient.prototype.matchUser = function (userKey, partnerId, userId, networkId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this._api.matchUser(networkId || this._networkId, userKey, partnerId, userId)];
                    case 1: return [2, _a.sent()];
                }
            });
        });
    };
    UserDbClient.prototype.optOut = function (userKey, networkId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this._api.optOut(networkId || this._networkId, userKey)];
                    case 1: return [2, _a.sent()];
                }
            });
        });
    };
    UserDbClient.prototype.read = function (userKey, networkId) {
        return __awaiter(this, void 0, void 0, function () {
            var record, _a, cookieMonster, _b, dirtyCookies, _c, isNew, _d, adViewTimes, _e, advertiserViewTimes, _f, flightViewTimes, _g, siteViewTimes, _h, campaignViewTimes, _j, pendingConversions, _k, campaignConversions, rest;
            return __generator(this, function (_l) {
                switch (_l.label) {
                    case 0: return [4, this._api.read(networkId || this._networkId, userKey)];
                    case 1:
                        record = _l.sent();
                        _a = record.cookieMonster, cookieMonster = _a === void 0 ? undefined : _a, _b = record.dirtyCookies, dirtyCookies = _b === void 0 ? undefined : _b, _c = record.isNew, isNew = _c === void 0 ? undefined : _c, _d = record.adViewTimes, adViewTimes = _d === void 0 ? undefined : _d, _e = record.advertiserViewTimes, advertiserViewTimes = _e === void 0 ? undefined : _e, _f = record.flightViewTimes, flightViewTimes = _f === void 0 ? undefined : _f, _g = record.siteViewTimes, siteViewTimes = _g === void 0 ? undefined : _g, _h = record.campaignViewTimes, campaignViewTimes = _h === void 0 ? undefined : _h, _j = record.pendingConversions, pendingConversions = _j === void 0 ? undefined : _j, _k = record.campaignConversions, campaignConversions = _k === void 0 ? undefined : _k, rest = __rest(record, ["cookieMonster", "dirtyCookies", "isNew", "adViewTimes", "advertiserViewTimes", "flightViewTimes", "siteViewTimes", "campaignViewTimes", "pendingConversions", "campaignConversions"]);
                        return [2, rest];
                }
            });
        });
    };
    return UserDbClient;
}());
var PixelClient = (function () {
    function PixelClient(fetch, agent, logger, versionString) {
        this._fetch = fetch;
        this._agent = agent;
        this._logger = logger;
        this._versionString = versionString;
    }
    PixelClient.prototype.buildFireUrl = function (params) {
        var parsed = new URL(params.url);
        if (params.revenueOverride) {
            parsed.searchParams.append('override', params.revenueOverride.toString());
        }
        if (params.additionalRevenue) {
            parsed.searchParams.append('additional', params.additionalRevenue.toString());
        }
        if (params.eventMultiplier) {
            parsed.searchParams.append('eventMultiplier', params.eventMultiplier.toString());
        }
        if (params.grossMerchandiseValue) {
            parsed.searchParams.append('gmv', params.grossMerchandiseValue.toString());
        }
        return parsed.href;
    };
    PixelClient.prototype.fire = function (params, additionalOpts) {
        return __awaiter(this, void 0, void 0, function () {
            var logger, headersbase, headers, opts, url, result, location;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        logger = this._logger || defaultLogger;
                        headersbase = {
                            'X-Adzerk-Sdk-Version': this._versionString,
                            'User-Agent': (additionalOpts === null || additionalOpts === void 0 ? void 0 : additionalOpts.userAgent) || 'OpenAPI-Generator/1.0/js',
                        };
                        headers = (additionalOpts === null || additionalOpts === void 0 ? void 0 : additionalOpts.apiKey) ? __assign(__assign({}, headersbase), { 'X-Kevel-ApiKey': additionalOpts.apiKey }) :
                            headersbase;
                        opts = {
                            method: 'GET',
                            headers: headers,
                            redirect: 'manual',
                        };
                        url = this.buildFireUrl(params);
                        logger('info', "Firing Pixel at base url of: " + url);
                        if (!!this._agent) {
                            opts.agent = this._agent;
                        }
                        return [4, this._fetch(url, opts)];
                    case 1:
                        result = _a.sent();
                        if (result.headers.has('location')) {
                            location = result.headers.get('location');
                        }
                        logger('info', "Received response from pixel url: " + result.status + " with location: " + location);
                        return [2, {
                                status: result.status,
                                location: result.headers.has('location')
                                    ? result.headers.get('location')
                                    : undefined,
                            }];
                }
            });
        });
    };
    return PixelClient;
}());
var Client = (function () {
    function Client(opts) {
        var _this = this;
        var fetch = (opts.fetch || isomorphic_unfetch_1.default).bind(global);
        var logger = opts.logger || defaultLogger;
        var protocol = opts.protocol || 'https';
        var host = opts.host || "e-" + opts.networkId + ".adzerk.net";
        var basePath = protocol + "://" + host;
        var versionString = 'adzerk-decision-sdk-js:1.0.0-beta.25';
        var adzerkApiKey = opts.apiKey;
        if (!!opts.additionalVersionInfo) {
            versionString = opts.additionalVersionInfo + ";" + versionString;
        }
        this._path = opts.path;
        if (isNode && !isReactNative) {
            var Agent = require(protocol).Agent;
            this._agent =
                opts.agent ||
                    new Agent({
                        keepAlive: true,
                        timeout: 10 * 1000,
                    });
        }
        var middleware = {
            pre: function (context) { return __awaiter(_this, void 0, void 0, function () {
                var headers;
                return __generator(this, function (_a) {
                    logger('info', "Request Url: " + context.url);
                    logger('info', "Request Headers: " + context.init.headers);
                    logger('info', "Request Body: " + context.init.body);
                    if (this._agent != undefined) {
                        context.init.agent = this._agent;
                    }
                    if (this._path != undefined) {
                        context.url = "" + basePath + this._path;
                    }
                    if (!context.init.headers) {
                        context.init.headers = {};
                    }
                    headers = context.init.headers;
                    headers['X-Adzerk-Sdk-Version'] = versionString;
                    if (adzerkApiKey) {
                        headers['X-Adzerk-ApiKey'] = adzerkApiKey;
                    }
                    return [2, context];
                });
            }); },
            post: function (context) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    logger('info', "Response Code: " + context.response.status);
                    logger('info', "Response Status Text: " + context.response.statusText);
                    return [2, context.response];
                });
            }); },
        };
        var configuration = new api_decision_js_1.Configuration({
            basePath: basePath,
            fetchApi: fetch,
            apiKey: opts.apiKey,
            middleware: __spreadArrays((opts.middlewares || []), [middleware]),
        });
        this._decisionClient = new DecisionClient(configuration, opts.networkId, logger, opts.siteId, adzerkApiKey);
        this._userDbClient = new UserDbClient(configuration, opts.networkId);
        this._pixelClient = new PixelClient(fetch, this._agent, logger, versionString);
    }
    Object.defineProperty(Client.prototype, "decisions", {
        get: function () {
            return this._decisionClient;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Client.prototype, "userDb", {
        get: function () {
            return this._userDbClient;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Client.prototype, "pixels", {
        get: function () {
            return this._pixelClient;
        },
        enumerable: false,
        configurable: true
    });
    return Client;
}());
exports.Client = Client;
