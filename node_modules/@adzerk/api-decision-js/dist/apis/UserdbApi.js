"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Adzerk Decision API
 * Adzerk Decision API
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserdbApi = void 0;
var runtime = __importStar(require("../runtime"));
var models_1 = require("../models");
/**
 *
 */
var UserdbApi = /** @class */ (function (_super) {
    __extends(UserdbApi, _super);
    function UserdbApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Add Custom Properties to a User
     */
    UserdbApi.prototype.addCustomPropertiesRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.networkId === null || requestParameters.networkId === undefined) {
                            throw new runtime.RequiredError('networkId', 'Required parameter requestParameters.networkId was null or undefined when calling addCustomProperties.');
                        }
                        if (requestParameters.userKey === null || requestParameters.userKey === undefined) {
                            throw new runtime.RequiredError('userKey', 'Required parameter requestParameters.userKey was null or undefined when calling addCustomProperties.');
                        }
                        queryParameters = {};
                        if (requestParameters.userKey !== undefined) {
                            queryParameters['userKey'] = requestParameters.userKey;
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-Adzerk-ApiKey"] = this.configuration.apiKey("X-Adzerk-ApiKey"); // ApiKeyAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/udb/{networkId}/custom".replace("{".concat("networkId", "}"), encodeURIComponent(String(requestParameters.networkId))),
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: requestParameters.body,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.BlobApiResponse(response)];
                }
            });
        });
    };
    /**
     * Add Custom Properties to a User
     */
    UserdbApi.prototype.addCustomProperties = function (networkId, userKey, body) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.addCustomPropertiesRaw({ networkId: networkId, userKey: userKey, body: body })];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Add Interests to a User
     */
    UserdbApi.prototype.addInterestsRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.networkId === null || requestParameters.networkId === undefined) {
                            throw new runtime.RequiredError('networkId', 'Required parameter requestParameters.networkId was null or undefined when calling addInterests.');
                        }
                        if (requestParameters.userKey === null || requestParameters.userKey === undefined) {
                            throw new runtime.RequiredError('userKey', 'Required parameter requestParameters.userKey was null or undefined when calling addInterests.');
                        }
                        if (requestParameters.interest === null || requestParameters.interest === undefined) {
                            throw new runtime.RequiredError('interest', 'Required parameter requestParameters.interest was null or undefined when calling addInterests.');
                        }
                        queryParameters = {};
                        if (requestParameters.userKey !== undefined) {
                            queryParameters['userKey'] = requestParameters.userKey;
                        }
                        if (requestParameters.interest !== undefined) {
                            queryParameters['interest'] = requestParameters.interest;
                        }
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/udb/{networkId}/interest/i.gif".replace("{".concat("networkId", "}"), encodeURIComponent(String(requestParameters.networkId))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.BlobApiResponse(response)];
                }
            });
        });
    };
    /**
     * Add Interests to a User
     */
    UserdbApi.prototype.addInterests = function (networkId, userKey, interest) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.addInterestsRaw({ networkId: networkId, userKey: userKey, interest: interest })];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Add User to a Retargeting Segment
     */
    UserdbApi.prototype.addRetargetingSegmentRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.networkId === null || requestParameters.networkId === undefined) {
                            throw new runtime.RequiredError('networkId', 'Required parameter requestParameters.networkId was null or undefined when calling addRetargetingSegment.');
                        }
                        if (requestParameters.advertiserId === null || requestParameters.advertiserId === undefined) {
                            throw new runtime.RequiredError('advertiserId', 'Required parameter requestParameters.advertiserId was null or undefined when calling addRetargetingSegment.');
                        }
                        if (requestParameters.retargetingSegmentId === null || requestParameters.retargetingSegmentId === undefined) {
                            throw new runtime.RequiredError('retargetingSegmentId', 'Required parameter requestParameters.retargetingSegmentId was null or undefined when calling addRetargetingSegment.');
                        }
                        if (requestParameters.userKey === null || requestParameters.userKey === undefined) {
                            throw new runtime.RequiredError('userKey', 'Required parameter requestParameters.userKey was null or undefined when calling addRetargetingSegment.');
                        }
                        queryParameters = {};
                        if (requestParameters.userKey !== undefined) {
                            queryParameters['userKey'] = requestParameters.userKey;
                        }
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/udb/{networkId}/rt/{advertiserId}/{retargetingSegmentId}/i.gif".replace("{".concat("networkId", "}"), encodeURIComponent(String(requestParameters.networkId))).replace("{".concat("advertiserId", "}"), encodeURIComponent(String(requestParameters.advertiserId))).replace("{".concat("retargetingSegmentId", "}"), encodeURIComponent(String(requestParameters.retargetingSegmentId))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.BlobApiResponse(response)];
                }
            });
        });
    };
    /**
     * Add User to a Retargeting Segment
     */
    UserdbApi.prototype.addRetargetingSegment = function (networkId, advertiserId, retargetingSegmentId, userKey) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.addRetargetingSegmentRaw({ networkId: networkId, advertiserId: advertiserId, retargetingSegmentId: retargetingSegmentId, userKey: userKey })];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Forget User
     */
    UserdbApi.prototype.forgetRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.networkId === null || requestParameters.networkId === undefined) {
                            throw new runtime.RequiredError('networkId', 'Required parameter requestParameters.networkId was null or undefined when calling forget.');
                        }
                        if (requestParameters.userKey === null || requestParameters.userKey === undefined) {
                            throw new runtime.RequiredError('userKey', 'Required parameter requestParameters.userKey was null or undefined when calling forget.');
                        }
                        queryParameters = {};
                        if (requestParameters.userKey !== undefined) {
                            queryParameters['userKey'] = requestParameters.userKey;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-Adzerk-ApiKey"] = this.configuration.apiKey("X-Adzerk-ApiKey"); // ApiKeyAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/udb/{networkId}".replace("{".concat("networkId", "}"), encodeURIComponent(String(requestParameters.networkId))),
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.VoidApiResponse(response)];
                }
            });
        });
    };
    /**
     * Forget User
     */
    UserdbApi.prototype.forget = function (networkId, userKey) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.forgetRaw({ networkId: networkId, userKey: userKey })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * GDPR Consent
     */
    UserdbApi.prototype.gdprConsentRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.networkId === null || requestParameters.networkId === undefined) {
                            throw new runtime.RequiredError('networkId', 'Required parameter requestParameters.networkId was null or undefined when calling gdprConsent.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-Adzerk-ApiKey"] = this.configuration.apiKey("X-Adzerk-ApiKey"); // ApiKeyAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/udb/{networkId}/consent".replace("{".concat("networkId", "}"), encodeURIComponent(String(requestParameters.networkId))),
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: (0, models_1.ConsentRequestToJSON)(requestParameters.consentRequest),
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.BlobApiResponse(response)];
                }
            });
        });
    };
    /**
     * GDPR Consent
     */
    UserdbApi.prototype.gdprConsent = function (networkId, consentRequest) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.gdprConsentRaw({ networkId: networkId, consentRequest: consentRequest })];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * IP Address Override
     */
    UserdbApi.prototype.ipOverrideRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.networkId === null || requestParameters.networkId === undefined) {
                            throw new runtime.RequiredError('networkId', 'Required parameter requestParameters.networkId was null or undefined when calling ipOverride.');
                        }
                        if (requestParameters.userKey === null || requestParameters.userKey === undefined) {
                            throw new runtime.RequiredError('userKey', 'Required parameter requestParameters.userKey was null or undefined when calling ipOverride.');
                        }
                        if (requestParameters.ip === null || requestParameters.ip === undefined) {
                            throw new runtime.RequiredError('ip', 'Required parameter requestParameters.ip was null or undefined when calling ipOverride.');
                        }
                        queryParameters = {};
                        if (requestParameters.userKey !== undefined) {
                            queryParameters['userKey'] = requestParameters.userKey;
                        }
                        if (requestParameters.ip !== undefined) {
                            queryParameters['ip'] = requestParameters.ip;
                        }
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/udb/{networkId}/ip/i.gif".replace("{".concat("networkId", "}"), encodeURIComponent(String(requestParameters.networkId))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.BlobApiResponse(response)];
                }
            });
        });
    };
    /**
     * IP Address Override
     */
    UserdbApi.prototype.ipOverride = function (networkId, userKey, ip) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.ipOverrideRaw({ networkId: networkId, userKey: userKey, ip: ip })];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * User Matching
     */
    UserdbApi.prototype.matchUserRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.networkId === null || requestParameters.networkId === undefined) {
                            throw new runtime.RequiredError('networkId', 'Required parameter requestParameters.networkId was null or undefined when calling matchUser.');
                        }
                        if (requestParameters.userKey === null || requestParameters.userKey === undefined) {
                            throw new runtime.RequiredError('userKey', 'Required parameter requestParameters.userKey was null or undefined when calling matchUser.');
                        }
                        if (requestParameters.partnerId === null || requestParameters.partnerId === undefined) {
                            throw new runtime.RequiredError('partnerId', 'Required parameter requestParameters.partnerId was null or undefined when calling matchUser.');
                        }
                        if (requestParameters.userId === null || requestParameters.userId === undefined) {
                            throw new runtime.RequiredError('userId', 'Required parameter requestParameters.userId was null or undefined when calling matchUser.');
                        }
                        queryParameters = {};
                        if (requestParameters.userKey !== undefined) {
                            queryParameters['userKey'] = requestParameters.userKey;
                        }
                        if (requestParameters.partnerId !== undefined) {
                            queryParameters['partnerId'] = requestParameters.partnerId;
                        }
                        if (requestParameters.userId !== undefined) {
                            queryParameters['userId'] = requestParameters.userId;
                        }
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/udb/{networkId}/sync/i.gif".replace("{".concat("networkId", "}"), encodeURIComponent(String(requestParameters.networkId))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.BlobApiResponse(response)];
                }
            });
        });
    };
    /**
     * User Matching
     */
    UserdbApi.prototype.matchUser = function (networkId, userKey, partnerId, userId) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.matchUserRaw({ networkId: networkId, userKey: userKey, partnerId: partnerId, userId: userId })];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Opt-Out a User
     */
    UserdbApi.prototype.optOutRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.networkId === null || requestParameters.networkId === undefined) {
                            throw new runtime.RequiredError('networkId', 'Required parameter requestParameters.networkId was null or undefined when calling optOut.');
                        }
                        if (requestParameters.userKey === null || requestParameters.userKey === undefined) {
                            throw new runtime.RequiredError('userKey', 'Required parameter requestParameters.userKey was null or undefined when calling optOut.');
                        }
                        queryParameters = {};
                        if (requestParameters.userKey !== undefined) {
                            queryParameters['userKey'] = requestParameters.userKey;
                        }
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/udb/{networkId}/optout/i.gif".replace("{".concat("networkId", "}"), encodeURIComponent(String(requestParameters.networkId))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.BlobApiResponse(response)];
                }
            });
        });
    };
    /**
     * Opt-Out a User
     */
    UserdbApi.prototype.optOut = function (networkId, userKey) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.optOutRaw({ networkId: networkId, userKey: userKey })];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Read a User\'s UserDB Record
     */
    UserdbApi.prototype.readRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.networkId === null || requestParameters.networkId === undefined) {
                            throw new runtime.RequiredError('networkId', 'Required parameter requestParameters.networkId was null or undefined when calling read.');
                        }
                        if (requestParameters.userKey === null || requestParameters.userKey === undefined) {
                            throw new runtime.RequiredError('userKey', 'Required parameter requestParameters.userKey was null or undefined when calling read.');
                        }
                        queryParameters = {};
                        if (requestParameters.userKey !== undefined) {
                            queryParameters['userKey'] = requestParameters.userKey;
                        }
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/udb/{networkId}/read".replace("{".concat("networkId", "}"), encodeURIComponent(String(requestParameters.networkId))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response)];
                }
            });
        });
    };
    /**
     * Read a User\'s UserDB Record
     */
    UserdbApi.prototype.read = function (networkId, userKey) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.readRaw({ networkId: networkId, userKey: userKey })];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return UserdbApi;
}(runtime.BaseAPI));
exports.UserdbApi = UserdbApi;
